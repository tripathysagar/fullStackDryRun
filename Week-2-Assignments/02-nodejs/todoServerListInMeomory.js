/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
  const express = require('express')
  const bodyParser = require('body-parser')
  
  
  const { ToDo }= require("./todoClass.js")
  
  const app = express()
  const port = 3000
  
  
  const todoLis = new ToDo()
  console.log(todoLis)
  console.log(todoLis.getAll())
  
  const isError = (msg) => {
    if(typeof msg.error === "undefined")
      return true
    return false
  }
  
  const handleGetAllToDo = (req, resp) => {
    let todos = todoLis.getAll()
    resp.send(todos)
  }
  
  
  const handlePostToDo = (req,resp) => {
    //console.log(req.body)
    const added = todoLis.add(req.body.title, req.body.completed, req.body.description) 
    const status = isError(added) ? 202 : 401
  
    resp.status(status).send(added)
  }
  
  const handleGetToDoByID = (req, resp) => {
    const id = parseInt(req.params.id)
    const exist = todoLis.get(id) 
    //console.log("+++++++++++++++++++++++++++++++++++++++++")
    //console.log(id, exist)
    const status = isError(exist) ? 201 : 404
    
  
    resp.status(status).send(exist)
  
  }
  
  const handlePutToDoByID = (req, resp) => {
    const id = parseInt(req.params.id)
    //console.log(req.body)
    
    const exist = todoLis.update(id, req.body.title, req.body.completed, req.body.description) 
    const status = isError(exist) ? 200 : 404
  
    resp.status(status).send(exist)
  }
  
  const handleDeleteToDoByID = (req, resp) =>{
    const id = parseInt(req.params.id)
  
    const deleted = todoLis.remove(id) 
    const status = isError(deleted) ? 202 : 404
  
    resp.status(status).send(deleted)
  }
  
  app.use(bodyParser.json())
  
  app.get('/todos', handleGetAllToDo)
  app.post('/todos', handlePostToDo)
  app.get("/todos/:id", handleGetToDoByID)
  app.put("/todos/:id", handlePutToDoByID)
  app.delete("/todos/:id", handleDeleteToDoByID)
  
  module.exports = app;
  
  app.get('/', (req, resp)=>{
    resp.send({
      "msg" : "hello there"
    })
  })
  app.listen(port, ()=>{
    `app listening to the port ${port}`
  })
  /*
  const app = express()
  
  app.use(bodyParser.json())
  
  module.exports = app;
  */